#!/usr/bin/env python

# Parameter and Types:
#  https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/parameters-parameter

# Parameter Keys:
# Required: name, type
# Optional: displayName, default, values

# Data Types:
# string, number, boolean, object

# Note: There is no native way to enforce an object's structure.

import yaml
import sys

class ADOPipelineDocException(Exception):
    pass

class ADOPipelineDoc:
    def __init__(self, filename=None):
        self.filename = filename
        self.data = None

        if self.filename is None:
            raise ADOPipelineDocException("Filename must be provided to ADOPipelineDoc.")

        self.load_file()
        self.get_parameters()

    def load_file(self):
        """
        Loads the YAML file specified by the filename attribute and stores its parsed contents in the data attribute.

        Raises:
            - ADOPipelineDocException: If the file cannot be accessed.
            - ADOPipelineDocException: If the YAML file is empty or contains null data.
            - ADOPipelineDocException: If the YAML file has no parameters.
            - ADOPipelineDocException: If there is an error in parsing the YAML content.
        """
        try:
            with open(self.filename, 'r') as file:
                data = yaml.safe_load(file)

                if data is None:
                    raise ADOPipelineDocException("YAML file is empty or contains null data.")

                parameters = data.get('parameters', [])

                if not parameters:
                    raise ADOPipelineDocException("YAML file has no parameters.")

                self.data = data
                self.parameters = parameters

        except FileNotFoundError:
            raise ADOPipelineDocException(f"Error: The file {self.filename} was not found.")

        except PermissionError:
            raise ADOPipelineDocException(f"Error: Permission denied for file {self.filename}.")

        except yaml.YAMLError as exc:
            raise ADOPipelineDocException(f"Error parsing YAML file: {exc}")

    def process_data(self):
        """
        Converts the parameters into a markdown table and then to HTML using python-markdown.
        """
        # Prepare markdown table
        markdown_table = "| Name | Type | Default | Description |\n"
        markdown_table += "|------|------|---------|-------------|\n"

        required_rows = []
        optional_rows = []

        for param in self.parameters:
            name = param.get('name')
            param_type = param.get('type')
            default = param.get('default', '')
            description = param.get('description', '')

            if not name or not param_type:
                raise ADOPipelineDocException(f"Parameter missing 'name' or 'type': {param}")

            row = f"| {name} | {param_type} | {default} | {description} |\n"

            if default:
                optional_rows.append(row)
            else:
                required_rows.append(row)

#        name = param.get('name', '')
#        param_type = param.get('type', '')
#        default = param.get('default', '')
#        description = param.get('description', '')
#
#        row = f"| {name} | {param_type} | {default} | {description} |\n"
#        markdown_table += ''.join(required_rows) + ''.join(optional_rows)

# Example usage
yaml_processor = ADOPipelineDoc('azure-pipelines.yml')  # Replace with your YAML file path
markdown_output = yaml_processor.process_data()
print(markdown_output)
