#!/usr/bin/env python

# Parameter and Types:
#  https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/parameters-parameter

# Parameter Keys:
# Required: name, type
# Optional: displayName, default, values

# Data Types:
# string, number, boolean, object

# Note: There is no native way to enforce an object's structure.

import yaml
import sys

class ADOPipelineDocException(Exception):
    pass

class ADOPipelineDoc:
    def __init__(self, filename=None):
        self.filename = filename
        self.data = None

        if self.filename is None:
            raise ADOPipelineDocException("Filename must be provided to ADOPipelineDoc.")

        self.load_file()
        self.get_parameters()

    def load_file(self):
        """
        Loads the YAML file specified by the filename attribute and stores its parsed contents in the data attribute.

        Raises:
            - ADOPipelineDocException: If the file cannot be accessed.
            - ADOPipelineDocException: If the YAML file is empty or contains null data.
            - ADOPipelineDocException: If the YAML file has no parameters.
            - ADOPipelineDocException: If there is an error in parsing the YAML content.
        """
        try:
            with open(self.filename, 'r') as file:
                data = yaml.safe_load(file)

                if data is None:
                    raise ADOPipelineDocException("YAML file is empty or contains null data.")

                parameters = data.get('parameters', [])

                if not parameters:
                    raise ADOPipelineDocException("YAML file has no parameters.")

                self.data = data
                self.parameters = parameters

        except FileNotFoundError:
            raise ADOPipelineDocException(f"Error: The file {self.filename} was not found.")

        except PermissionError:
            raise ADOPipelineDocException(f"Error: Permission denied for file {self.filename}.")

        except yaml.YAMLError as exc:
            raise ADOPipelineDocException(f"Error parsing YAML file: {exc}")

    def process_data(self):
        """
        Converts the parameters into a markdown table and then to HTML using python-markdown.
        """
        heading_order = [ 'required', 'name', 'type', 'displayName', 'values', 'default' ]

        heading_separator = {
          "required": ":-:",
          "name": "--:",
          "type": "--:",
          "displayName": ":--",
          "values": ":--",
          "default": ":--"
        }

        object_template = {
          "required" = "âœ…",
          "name": '',
          "type": '',
          "displayName": '',
          "values": '',
          "default": ''
        }

        use_col = {
            "displayName": False,
            "values": False,
            "default": False
        }

        rows = []

        for param in self.parameters:
            if not param.name or not param.type:
                raise ADOPipelineDocException(f"Parameter missing 'name' or 'type': {param}")

            if param.get('displayName', ''):
              use_col["displayname"] = True

            if param.get('values', ''):
                use_col["values"] = True

            row_object = object_template.copy()
            row_object.update(param)

            if param.get('default', ''):
                use_col["default"] = True
                row_object["required"] = ''

            rows.append(row_object)

        for key, value in use_col.items():
            if not value:
                heading_order.remove(key)
                for row in rows:
                    row.pop(key, None)

        table_rows = []

        # Build the markdown header row
        header_row = "| " + " | ".join(heading_order) + " |"
        separator_row = "| " + " | ".join(heading_separator[key] for key in heading_order) + " |"

        # Add header and separator to table_rows
        table_rows.append(header_row)
        table_rows.append(separator_row)

        # Add parameter rows to table_rows
        for row in rows:
            row_data = [row.get(key, '') for key in heading_order]
            table_rows.append("| " + " | ".join(row_data) + " |")

        self.table_rows = table_rows


# Example usage
yaml_processor = ADOPipelineDoc('azure-pipelines.yml')  # Replace with your YAML file path
markdown_output = yaml_processor.process_data()
print(markdown_output)
